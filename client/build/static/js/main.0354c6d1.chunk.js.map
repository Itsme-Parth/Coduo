{"version":3,"sources":["stubs.js","App.js","reportWebVitals.js","index.js"],"names":["stubs","App","useState","code","setCode","language","setLanguage","output","setOutput","status","setStatus","jobId","setJobId","jobDetails","setJobDetails","useEffect","DefaultLang","localStorage","getItem","handleSubmit","a","payload","axios","post","data","console","log","pollInterval","setInterval","get","params","id","dataRes","success","job","error","jobStatus","jobOutput","clearInterval","response","errMsg","err","stderr","className","value","onChange","e","window","confirm","target","onClick","setItem","rows","cols","submittedAt","startedAt","completedAt","result","moment","toString","start","diff","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0354c6d1.chunk.js","sourcesContent":["const stubs = {};\r\n\r\nstubs.cpp = `#include <iostream>\r\n#include <stdio.h>\r\nusing namespace std;\r\nint main() {\r\n  cout<<\"Hello world!\\\\n\";\r\n  return 0;\r\n}\r\n`;\r\n\r\nstubs.py = `print(\"Hello world!\")`;\r\n\r\nexport default stubs;\r\n","import axios from \"axios\";\nimport \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport stubs from \"./stubs\";\nimport moment from \"moment\";\nfunction App() {\n  const [code, setCode] = useState(\"\"); //code is the variable that contains the text of the textarea and setCode sets the text to the textarea\n  const [language, setLanguage] = useState(\"cpp\");\n  const [output, setOutput] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [jobId, setJobId] = useState(\"\");\n  const [jobDetails, setJobDetails] = useState(null);\n  useEffect(() => {\n    const DefaultLang = localStorage.getItem(\"default-language\") || \"cpp\";\n    setLanguage(DefaultLang);\n  }, []);\n\n  useEffect(() => {\n    setCode(stubs[language]);\n  }, [language]);\n\n  const setDefaultLanguage = () => {\n    localStorage.setItem(\"default-language\", language);\n    console.log(`${language}`);\n  };\n\n  const renderTimeDetails = () => {\n    if (!jobDetails) {\n      return \"\";\n    }\n    let { submittedAt, startedAt, completedAt } = jobDetails;\n    let result = \"\";\n    submittedAt = moment(submittedAt).toString();\n    result += `Job Submitted At: ${submittedAt}  `;\n    if (!startedAt || !completedAt) return result;\n    const start = moment(startedAt);\n    const end = moment(completedAt);\n    const diff = end.diff(start, \"seconds\", true);\n    result += `Execution Time: ${diff}s`;\n    return result;\n  };\n\n  const handleSubmit = async () => {\n    const payload = {\n      language,\n      code,\n    };\n\n    try {\n      setJobId(\"\");\n      setStatus(\"\");\n      setOutput(\"\");\n      setJobDetails(null);\n      const { data } = await axios.post(\"http://localhost:8888/run\", payload);\n      console.log(data);\n      setJobId(data.jobId);\n      let pollInterval;\n\n      pollInterval = setInterval(async () => {\n        const { data: dataRes } = await axios.get(\n          \"http://localhost:8888/status\",\n          { params: { id: data.jobId } }\n        );\n\n        const { success, job, error } = dataRes;\n        console.log(dataRes);\n        if (success) {\n          const { status: jobStatus, output: jobOutput } = job;\n          setStatus(jobStatus);\n          setJobDetails(job);\n          if (jobStatus === \"pending\") return;\n          setOutput(jobOutput);\n          clearInterval(pollInterval);\n        } else {\n          console.error(error);\n          setOutput(error);\n          setStatus(\"Bad request\");\n          clearInterval(pollInterval);\n        }\n        console.log(dataRes);\n      }, 1000);\n    } catch ({ response }) {\n      if (response) {\n        const errMsg = response.data.err.stderr;\n        setOutput(errMsg);\n      } else {\n        setOutput(\"Error connecting to server!\");\n      }\n      // console.log(err.response);\n    }\n    // console.log(output);\n  };\n  return (\n    <div className=\"App\">\n      <h1>Online Code compiler</h1>\n      <div>\n        <label>Language: </label>\n        <select\n          value={language}\n          onChange={(e) => {\n            let response = window.confirm(\n              \"Are you sure you want to change language? WARNING: Your current code will be lost.\"\n            );\n            if (response) {\n              setLanguage(e.target.value);\n            }\n          }}\n        >\n          <option value=\"cpp\">C++</option>\n          <option value=\"py\">Python</option>\n        </select>\n      </div>\n      <br />\n      <div>\n        <button onClick={setDefaultLanguage}>Set Default</button>\n      </div>\n      <br />\n      <textarea\n        rows=\"20\"\n        cols=\"70\"\n        value={code}\n        onChange={(e) => {\n          setCode(e.target.value);\n        }}\n      ></textarea>\n      <br />\n      <button onClick={handleSubmit}>Submit</button>\n      <p>{status}</p>\n      <p>{jobId && `JobID : ${jobId}`}</p>\n      <p>{renderTimeDetails}</p>\n      <p>{output}</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}